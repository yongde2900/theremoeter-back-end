<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%=title%>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <style>
        .container video {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            object-fit: cover;
        }

        .container {
            height: 100% !important;
            width: 100% !important;
        }

        .p-3 {
            position: relative;
            left: 25%;
            width: 150px !important;
            height: 60px !important;
        }

        .col {
            width: 80% !important;
            height: 90% !important;
        }

      

        canvas {
            position: relative;
            left: 10px;
            width: 80% !important;
            height: 80% !important;
        }

        .chart-wrapper {

            display: flex;
            /* position: relative; */
            /* text-align: center; */
            margin-left: 25%;
            width: 50%;
            height: 70%;
        }

        div {
            color: rgb(0, 0, 0);
            background-size: 360px 100px;
            border-radius: 25px;
            -webkit-animation: animation;
            animation: animation;
        }
     
        span {
            position: relative;
            left: 10%;
            
        }
        input{
            z-index: 50;
            position:relative;
            height: 10%;
            width: :10%;
            top:30px;
            left:5px;
        }
        .animation {
            animation-name: breath;
            animation-duration: 1s;
            animation-timing-function: linear;
            animation-iteration-count: 1;
            animation-delay: 0s;

        }

        @keyframes breath {
       

            50% {
                background-color: #ff5656;
            }

        
        }
    </style>
</head>

<body onload="current_time();">
    <div class="container px-4">
        <video autoplay muted loop>
            <source
                src="https://static.videezy.com/system/resources/previews/000/037/438/original/4k-cartoon-funny-spring-country-landscape-seamless-looping.mp4"
                type="video/mp4">
        </video>
        <div class="row gx-5">
            <div class="col">
                <div id="temp" class="p-3 border bg">溫度:</div>
                <canvas id="myChart"></canvas>
            </div>
            <div class="col">
                <div id="humi" class="p-3 border bg">濕度:</div>
                <canvas id="myChart1"></canvas>
            </div>
        </div>
        <!-- <div class="chart-wrapper"> -->
    </div>
    </div>
    </div>
    <div class="chart-wrapper">
        <canvas id="myChartLine">
        </canvas>

        <span id="current"></span>
        <input type ="button" onclick="location.href='./histroy'" value="歷史資料"></input>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById("myChart")
        var ctx1 = document.getElementById("myChart1")
        var ctxLine = document.getElementById("myChartLine")

        const labels = ['溫度']
        var chartdata = {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: ['溫度'],
                    data: [20],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.9)',],
                    borderColor: [
                        'rgb(255, 159, 64,1)',],
                    borderWidth: 1,
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                        suggestedMax: 30,
                        ticks: {
                            color: 'white',
                            font: {
                                size: 20,
                            }
                        }
                    },
                    x: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                    }
                }
            },
        }
        var config = new Chart(ctx, chartdata)
        var chartdata2 = {
            type: 'bar',
            data: {
                labels: ["濕度"],
                datasets: [{
                    label: ['濕度'],
                    data: [20],
                    backgroundColor: [
                        'rgba(255, 159, 64, 0.9)'],
                    borderColor: [
                        'rgb(255, 99, 132)'],
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,

                scales: {
                    y: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                        suggestedMax: 30,
                        ticks: {
                            color: 'white',
                            font: {
                                size: 20,
                            }
                        }
                    },
                    x: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                    }
                }
            },
        }
        var config2 = new Chart(ctx1, chartdata2)
        var LineChartData = {
            type: 'line',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
                datasets: [{
                    label: ['平均溫度'],
                    data: [0, 0, 0, 0, 0, 0, 0],
                    fill: false,
                    borderColor: 'rgba(75, 192, 192,1)',
                }, {
                    label: '平均濕度',
                    data: [0, 0, 0,0 , 0, 0, 0],
                    borderColor: [
                        'rgba(255, 159, 64, 1)'],
                }]
            }, options: {
                scales: {
                    y: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                        suggestedMax: 25,
                        suggestedMin: 10,

                        ticks: {
                            color: 'white',
                            font: {
                                size: 20,
                            }
                        }
                    },
                    x: {
                        grid: {
                            color: "rgba(0,0,0,0.5)"
                        },
                    }
                }
            }
        }
        var myChart = new Chart(ctxLine, LineChartData);
    </script>

  
    <script>
        function current_time() {

            document.getElementById("current").innerHTML = new Date().getHours()+":"+ new Date().getMinutes()+":"+ new Date().getSeconds();
            setTimeout("current_time()", 1000); //每秒呼叫一次功能:
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mqtt/4.3.7/mqtt.js"
        integrity="sha512-yX4jaiU9Ai9dzaimFoTq+tQYOrAMNP+EWiiUVsru3ypsAi76c0zCPBfxKagLkKjC4ZeLMEQTa7aE7CtjTmlgDA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.3/axios.js"
        integrity="sha512-uap0bTaa/bPjLtLVuiWS+qak4SJrOPcdfVzUdrrE7LgvtMlkV6DeiBH7Rgt7B+74M3crOr3QdTX3gCTMMRVzZA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="module">
        // connect to broker with websocket
        function getDataAndUpdate(){
            axios.get('https://therometer.onrender.com/api/data')
            .then((res)=>{
                const data =res.data;
                
                    const T =data.temperature;
                    const H =data.humidity;
                    document.getElementById('temp').innerHTML = `溫度=${T}`;
                    document.getElementById('humi').innerHTML = `濕度=${H}`;
                    const el = document.getElementById("temp");
                    const el1 = document.getElementById("humi");
                    el.style.animation = "breath 1s ";
                    el1.style.animation = "breath 1s ";
                    chartdata.data.datasets[0].data[0] = `${T}`;
                    chartdata2.data.datasets[0].data[0] = `${H}`;
                    LineChartData.data.labels[6] = (`${HT}:${MT}:${ST}`)
                
                    for (let i = 0; i < LineChartData.data.datasets[0].data.length - 1; i++) {
                    LineChartData.data.labels[i] = LineChartData.data.labels[i + 1];
                    LineChartData.data.datasets[0].data[i] = LineChartData.data.datasets[0].data[i + 1];
                    LineChartData.data.datasets[1].data[i] = LineChartData.data.datasets[1].data[i + 1];
                    myChart.update();
                }
                let ST =0;
                ST= new Date().getSeconds()
                ST = ST.toString();
                let MT =0
                MT= new Date().getMinutes()
                MT = MT.toString()
                let HT =0
                HT= new Date().getUTCHours() + 8;
                HT = HT.toString();
                LineChartData.data.datasets[0].data[6] = `${T}`;
                LineChartData.data.datasets[1].data[6] = `${H}`;
                myChart.update();
                config.update();
                config2.update();
                el.addEventListener("animationend", () => {
                    el.style.animation = "none"
                    el1.style.animation = "none"
                    // console.log("hi here")
                })
               
            })

        }
        setInterval(getDataAndUpdate,5000);

        // let client = mqtt.connect('ws://192.168.168.169:1884', option)
        // client.on('connect', () => {
        //     console.log('connected')
        //     const el = document.getElementById("temp");
        //     client.subscribe('climate/data')
        //     client.on('message', (topic, payload) => {
        //         const T = JSON.parse(payload).temperature;
        //         const H = JSON.parse(payload).humidity;
        //         document.getElementById('temp').innerHTML = `溫度=${T}`;
        //         document.getElementById('humi').innerHTML = `濕度=${H}`;
        //         const el = document.getElementById("temp");
        //         const el1 = document.getElementById("humi");
        //         el.style.animation = "breath 1s ";
        //         el1.style.animation = "breath 1s ";
        //         chartdata.data.datasets[0].data[0] = `${T}`;
        //         chartdata2.data.datasets[0].data[0] = `${H}`;
        //         for (let i = 0; i < LineChartData.data.datasets[0].data.length - 1; i++) {
        //             LineChartData.data.labels[i] = LineChartData.data.labels[i + 1];
        //             LineChartData.data.datasets[0].data[i] = LineChartData.data.datasets[0].data[i + 1];
        //             LineChartData.data.datasets[1].data[i] = LineChartData.data.datasets[1].data[i + 1];
        //             myChart.update();
        //         }
        //         let ST = new Date().getSeconds()
        //         ST = ST.toString();
        //         let MT = new Date().getMinutes()
        //         MT = MT.toString()
        //         let HT = new Date().getUTCHours() + 8;
        //         HT = HT.toString();
        //         LineChartData.data.labels[6] = (`${HT}:${MT}:${ST}`)
        //         LineChartData.data.datasets[0].data[6] = `${T}`;
        //         LineChartData.data.datasets[1].data[6] = `${H}`;
        //         myChart.update();
        //         config.update();
        //         config2.update();
        //         el.addEventListener("animationend", () => {
        //             el.style.animation = "none"
        //             el1.style.animation = "none"
        //             // console.log("hi here")
        //         })
        //     })
        // })
    </script>
</body>

</html>